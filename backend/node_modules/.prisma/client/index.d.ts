
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model activity
 * 
 */
export type activity = $Result.DefaultSelection<Prisma.$activityPayload>
/**
 * Model food
 * 
 */
export type food = $Result.DefaultSelection<Prisma.$foodPayload>
/**
 * Model userdata
 * 
 */
export type userdata = $Result.DefaultSelection<Prisma.$userdataPayload>
/**
 * Model xp
 * 
 */
export type xp = $Result.DefaultSelection<Prisma.$xpPayload>
/**
 * Model newxp
 * 
 */
export type newxp = $Result.DefaultSelection<Prisma.$newxpPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Activities
 * const activities = await prisma.activity.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Activities
   * const activities = await prisma.activity.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.activity`: Exposes CRUD operations for the **activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.activityDelegate<ExtArgs>;

  /**
   * `prisma.food`: Exposes CRUD operations for the **food** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foods
    * const foods = await prisma.food.findMany()
    * ```
    */
  get food(): Prisma.foodDelegate<ExtArgs>;

  /**
   * `prisma.userdata`: Exposes CRUD operations for the **userdata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userdata
    * const userdata = await prisma.userdata.findMany()
    * ```
    */
  get userdata(): Prisma.userdataDelegate<ExtArgs>;

  /**
   * `prisma.xp`: Exposes CRUD operations for the **xp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Xps
    * const xps = await prisma.xp.findMany()
    * ```
    */
  get xp(): Prisma.xpDelegate<ExtArgs>;

  /**
   * `prisma.newxp`: Exposes CRUD operations for the **newxp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newxps
    * const newxps = await prisma.newxp.findMany()
    * ```
    */
  get newxp(): Prisma.newxpDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    activity: 'activity',
    food: 'food',
    userdata: 'userdata',
    xp: 'xp',
    newxp: 'newxp'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'activity' | 'food' | 'userdata' | 'xp' | 'newxp'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      activity: {
        payload: Prisma.$activityPayload<ExtArgs>
        fields: Prisma.activityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.activityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.activityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          findFirst: {
            args: Prisma.activityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.activityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          findMany: {
            args: Prisma.activityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>[]
          }
          create: {
            args: Prisma.activityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          createMany: {
            args: Prisma.activityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.activityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          update: {
            args: Prisma.activityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          deleteMany: {
            args: Prisma.activityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.activityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.activityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.activityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.activityCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      food: {
        payload: Prisma.$foodPayload<ExtArgs>
        fields: Prisma.foodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.foodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.foodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          findFirst: {
            args: Prisma.foodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.foodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          findMany: {
            args: Prisma.foodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>[]
          }
          create: {
            args: Prisma.foodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          createMany: {
            args: Prisma.foodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.foodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          update: {
            args: Prisma.foodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          deleteMany: {
            args: Prisma.foodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.foodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.foodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$foodPayload>
          }
          aggregate: {
            args: Prisma.FoodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFood>
          }
          groupBy: {
            args: Prisma.foodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.foodCountArgs<ExtArgs>,
            result: $Utils.Optional<FoodCountAggregateOutputType> | number
          }
        }
      }
      userdata: {
        payload: Prisma.$userdataPayload<ExtArgs>
        fields: Prisma.userdataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userdataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userdataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          findFirst: {
            args: Prisma.userdataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userdataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          findMany: {
            args: Prisma.userdataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>[]
          }
          create: {
            args: Prisma.userdataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          createMany: {
            args: Prisma.userdataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userdataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          update: {
            args: Prisma.userdataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          deleteMany: {
            args: Prisma.userdataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userdataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userdataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userdataPayload>
          }
          aggregate: {
            args: Prisma.UserdataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserdata>
          }
          groupBy: {
            args: Prisma.userdataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserdataGroupByOutputType>[]
          }
          count: {
            args: Prisma.userdataCountArgs<ExtArgs>,
            result: $Utils.Optional<UserdataCountAggregateOutputType> | number
          }
        }
      }
      xp: {
        payload: Prisma.$xpPayload<ExtArgs>
        fields: Prisma.xpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.xpFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.xpFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          findFirst: {
            args: Prisma.xpFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.xpFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          findMany: {
            args: Prisma.xpFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>[]
          }
          create: {
            args: Prisma.xpCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          createMany: {
            args: Prisma.xpCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.xpDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          update: {
            args: Prisma.xpUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          deleteMany: {
            args: Prisma.xpDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.xpUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.xpUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$xpPayload>
          }
          aggregate: {
            args: Prisma.XpAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateXp>
          }
          groupBy: {
            args: Prisma.xpGroupByArgs<ExtArgs>,
            result: $Utils.Optional<XpGroupByOutputType>[]
          }
          count: {
            args: Prisma.xpCountArgs<ExtArgs>,
            result: $Utils.Optional<XpCountAggregateOutputType> | number
          }
        }
      }
      newxp: {
        payload: Prisma.$newxpPayload<ExtArgs>
        fields: Prisma.newxpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.newxpFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.newxpFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          findFirst: {
            args: Prisma.newxpFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.newxpFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          findMany: {
            args: Prisma.newxpFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>[]
          }
          create: {
            args: Prisma.newxpCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          createMany: {
            args: Prisma.newxpCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.newxpDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          update: {
            args: Prisma.newxpUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          deleteMany: {
            args: Prisma.newxpDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.newxpUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.newxpUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$newxpPayload>
          }
          aggregate: {
            args: Prisma.NewxpAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNewxp>
          }
          groupBy: {
            args: Prisma.newxpGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NewxpGroupByOutputType>[]
          }
          count: {
            args: Prisma.newxpCountArgs<ExtArgs>,
            result: $Utils.Optional<NewxpCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
  }

  export type ActivitySumAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
  }

  export type ActivityMinAggregateOutputType = {
    id: number | null
    activity: string | null
    waterfootprint: Decimal | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: number | null
    activity: string | null
    waterfootprint: Decimal | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    activity: number
    waterfootprint: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    id?: true
    waterfootprint?: true
  }

  export type ActivitySumAggregateInputType = {
    id?: true
    waterfootprint?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    activity?: true
    waterfootprint?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    activity?: true
    waterfootprint?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    activity?: true
    waterfootprint?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which activity to aggregate.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationAndSearchRelevanceInput | activityOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type activityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: activityWhereInput
    orderBy?: activityOrderByWithAggregationInput | activityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: activityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: number
    activity: string | null
    waterfootprint: Decimal | null
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends activityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type activitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activity?: boolean
    waterfootprint?: boolean
  }, ExtArgs["result"]["activity"]>

  export type activitySelectScalar = {
    id?: boolean
    activity?: boolean
    waterfootprint?: boolean
  }


  export type $activityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "activity"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      activity: string | null
      waterfootprint: Prisma.Decimal | null
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }


  type activityGetPayload<S extends boolean | null | undefined | activityDefaultArgs> = $Result.GetResult<Prisma.$activityPayload, S>

  type activityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<activityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface activityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['activity'], meta: { name: 'activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {activityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends activityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, activityFindUniqueArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {activityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends activityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, activityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends activityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, activityFindFirstArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends activityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, activityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends activityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, activityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Activity.
     * @param {activityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
    **/
    create<T extends activityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, activityCreateArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Activities.
     *     @param {activityCreateManyArgs} args - Arguments to create many Activities.
     *     @example
     *     // Create many Activities
     *     const activity = await prisma.activity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends activityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, activityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {activityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
    **/
    delete<T extends activityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, activityDeleteArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {activityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends activityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, activityUpdateArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {activityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends activityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, activityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends activityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, activityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {activityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends activityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, activityUpsertArgs<ExtArgs>>
    ): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends activityCountArgs>(
      args?: Subset<T, activityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends activityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: activityGroupByArgs['orderBy'] }
        : { orderBy?: activityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, activityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the activity model
   */
  readonly fields: activityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__activityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the activity model
   */ 
  interface activityFieldRefs {
    readonly id: FieldRef<"activity", 'Int'>
    readonly activity: FieldRef<"activity", 'String'>
    readonly waterfootprint: FieldRef<"activity", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * activity findUnique
   */
  export type activityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where: activityWhereUniqueInput
  }


  /**
   * activity findUniqueOrThrow
   */
  export type activityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where: activityWhereUniqueInput
  }


  /**
   * activity findFirst
   */
  export type activityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationAndSearchRelevanceInput | activityOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * activity findFirstOrThrow
   */
  export type activityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationAndSearchRelevanceInput | activityOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * activity findMany
   */
  export type activityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter, which activities to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationAndSearchRelevanceInput | activityOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * activity create
   */
  export type activityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * The data needed to create a activity.
     */
    data?: XOR<activityCreateInput, activityUncheckedCreateInput>
  }


  /**
   * activity createMany
   */
  export type activityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many activities.
     */
    data: activityCreateManyInput | activityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * activity update
   */
  export type activityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * The data needed to update a activity.
     */
    data: XOR<activityUpdateInput, activityUncheckedUpdateInput>
    /**
     * Choose, which activity to update.
     */
    where: activityWhereUniqueInput
  }


  /**
   * activity updateMany
   */
  export type activityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update activities.
     */
    data: XOR<activityUpdateManyMutationInput, activityUncheckedUpdateManyInput>
    /**
     * Filter which activities to update
     */
    where?: activityWhereInput
  }


  /**
   * activity upsert
   */
  export type activityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * The filter to search for the activity to update in case it exists.
     */
    where: activityWhereUniqueInput
    /**
     * In case the activity found by the `where` argument doesn't exist, create a new activity with this data.
     */
    create: XOR<activityCreateInput, activityUncheckedCreateInput>
    /**
     * In case the activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<activityUpdateInput, activityUncheckedUpdateInput>
  }


  /**
   * activity delete
   */
  export type activityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Filter which activity to delete.
     */
    where: activityWhereUniqueInput
  }


  /**
   * activity deleteMany
   */
  export type activityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which activities to delete
     */
    where?: activityWhereInput
  }


  /**
   * activity without action
   */
  export type activityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
  }



  /**
   * Model food
   */

  export type AggregateFood = {
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  export type FoodAvgAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
  }

  export type FoodSumAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
  }

  export type FoodMinAggregateOutputType = {
    id: number | null
    fooditems: string | null
    waterfootprint: Decimal | null
  }

  export type FoodMaxAggregateOutputType = {
    id: number | null
    fooditems: string | null
    waterfootprint: Decimal | null
  }

  export type FoodCountAggregateOutputType = {
    id: number
    fooditems: number
    waterfootprint: number
    _all: number
  }


  export type FoodAvgAggregateInputType = {
    id?: true
    waterfootprint?: true
  }

  export type FoodSumAggregateInputType = {
    id?: true
    waterfootprint?: true
  }

  export type FoodMinAggregateInputType = {
    id?: true
    fooditems?: true
    waterfootprint?: true
  }

  export type FoodMaxAggregateInputType = {
    id?: true
    fooditems?: true
    waterfootprint?: true
  }

  export type FoodCountAggregateInputType = {
    id?: true
    fooditems?: true
    waterfootprint?: true
    _all?: true
  }

  export type FoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which food to aggregate.
     */
    where?: foodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of foods to fetch.
     */
    orderBy?: foodOrderByWithRelationAndSearchRelevanceInput | foodOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: foodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned foods
    **/
    _count?: true | FoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodMaxAggregateInputType
  }

  export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFood[P]>
      : GetScalarType<T[P], AggregateFood[P]>
  }




  export type foodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: foodWhereInput
    orderBy?: foodOrderByWithAggregationInput | foodOrderByWithAggregationInput[]
    by: FoodScalarFieldEnum[] | FoodScalarFieldEnum
    having?: foodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodCountAggregateInputType | true
    _avg?: FoodAvgAggregateInputType
    _sum?: FoodSumAggregateInputType
    _min?: FoodMinAggregateInputType
    _max?: FoodMaxAggregateInputType
  }

  export type FoodGroupByOutputType = {
    id: number
    fooditems: string | null
    waterfootprint: Decimal | null
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  type GetFoodGroupByPayload<T extends foodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodGroupByOutputType[P]>
        }
      >
    >


  export type foodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fooditems?: boolean
    waterfootprint?: boolean
  }, ExtArgs["result"]["food"]>

  export type foodSelectScalar = {
    id?: boolean
    fooditems?: boolean
    waterfootprint?: boolean
  }


  export type $foodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "food"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fooditems: string | null
      waterfootprint: Prisma.Decimal | null
    }, ExtArgs["result"]["food"]>
    composites: {}
  }


  type foodGetPayload<S extends boolean | null | undefined | foodDefaultArgs> = $Result.GetResult<Prisma.$foodPayload, S>

  type foodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<foodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FoodCountAggregateInputType | true
    }

  export interface foodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['food'], meta: { name: 'food' } }
    /**
     * Find zero or one Food that matches the filter.
     * @param {foodFindUniqueArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends foodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, foodFindUniqueArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Food that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {foodFindUniqueOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends foodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, foodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Food that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodFindFirstArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends foodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, foodFindFirstArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Food that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodFindFirstOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends foodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, foodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Foods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foods
     * const foods = await prisma.food.findMany()
     * 
     * // Get first 10 Foods
     * const foods = await prisma.food.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodWithIdOnly = await prisma.food.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends foodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, foodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Food.
     * @param {foodCreateArgs} args - Arguments to create a Food.
     * @example
     * // Create one Food
     * const Food = await prisma.food.create({
     *   data: {
     *     // ... data to create a Food
     *   }
     * })
     * 
    **/
    create<T extends foodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, foodCreateArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Foods.
     *     @param {foodCreateManyArgs} args - Arguments to create many Foods.
     *     @example
     *     // Create many Foods
     *     const food = await prisma.food.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends foodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, foodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Food.
     * @param {foodDeleteArgs} args - Arguments to delete one Food.
     * @example
     * // Delete one Food
     * const Food = await prisma.food.delete({
     *   where: {
     *     // ... filter to delete one Food
     *   }
     * })
     * 
    **/
    delete<T extends foodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, foodDeleteArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Food.
     * @param {foodUpdateArgs} args - Arguments to update one Food.
     * @example
     * // Update one Food
     * const food = await prisma.food.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends foodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, foodUpdateArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Foods.
     * @param {foodDeleteManyArgs} args - Arguments to filter Foods to delete.
     * @example
     * // Delete a few Foods
     * const { count } = await prisma.food.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends foodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, foodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends foodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, foodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Food.
     * @param {foodUpsertArgs} args - Arguments to update or create a Food.
     * @example
     * // Update or create a Food
     * const food = await prisma.food.upsert({
     *   create: {
     *     // ... data to create a Food
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Food we want to update
     *   }
     * })
    **/
    upsert<T extends foodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, foodUpsertArgs<ExtArgs>>
    ): Prisma__foodClient<$Result.GetResult<Prisma.$foodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodCountArgs} args - Arguments to filter Foods to count.
     * @example
     * // Count the number of Foods
     * const count = await prisma.food.count({
     *   where: {
     *     // ... the filter for the Foods we want to count
     *   }
     * })
    **/
    count<T extends foodCountArgs>(
      args?: Subset<T, foodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodAggregateArgs>(args: Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

    /**
     * Group by Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {foodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends foodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: foodGroupByArgs['orderBy'] }
        : { orderBy?: foodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, foodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the food model
   */
  readonly fields: foodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for food.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__foodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the food model
   */ 
  interface foodFieldRefs {
    readonly id: FieldRef<"food", 'Int'>
    readonly fooditems: FieldRef<"food", 'String'>
    readonly waterfootprint: FieldRef<"food", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * food findUnique
   */
  export type foodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter, which food to fetch.
     */
    where: foodWhereUniqueInput
  }


  /**
   * food findUniqueOrThrow
   */
  export type foodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter, which food to fetch.
     */
    where: foodWhereUniqueInput
  }


  /**
   * food findFirst
   */
  export type foodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter, which food to fetch.
     */
    where?: foodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of foods to fetch.
     */
    orderBy?: foodOrderByWithRelationAndSearchRelevanceInput | foodOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for foods.
     */
    cursor?: foodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * food findFirstOrThrow
   */
  export type foodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter, which food to fetch.
     */
    where?: foodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of foods to fetch.
     */
    orderBy?: foodOrderByWithRelationAndSearchRelevanceInput | foodOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for foods.
     */
    cursor?: foodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * food findMany
   */
  export type foodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter, which foods to fetch.
     */
    where?: foodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of foods to fetch.
     */
    orderBy?: foodOrderByWithRelationAndSearchRelevanceInput | foodOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing foods.
     */
    cursor?: foodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` foods.
     */
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }


  /**
   * food create
   */
  export type foodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * The data needed to create a food.
     */
    data?: XOR<foodCreateInput, foodUncheckedCreateInput>
  }


  /**
   * food createMany
   */
  export type foodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many foods.
     */
    data: foodCreateManyInput | foodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * food update
   */
  export type foodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * The data needed to update a food.
     */
    data: XOR<foodUpdateInput, foodUncheckedUpdateInput>
    /**
     * Choose, which food to update.
     */
    where: foodWhereUniqueInput
  }


  /**
   * food updateMany
   */
  export type foodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update foods.
     */
    data: XOR<foodUpdateManyMutationInput, foodUncheckedUpdateManyInput>
    /**
     * Filter which foods to update
     */
    where?: foodWhereInput
  }


  /**
   * food upsert
   */
  export type foodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * The filter to search for the food to update in case it exists.
     */
    where: foodWhereUniqueInput
    /**
     * In case the food found by the `where` argument doesn't exist, create a new food with this data.
     */
    create: XOR<foodCreateInput, foodUncheckedCreateInput>
    /**
     * In case the food was found with the provided `where` argument, update it with this data.
     */
    update: XOR<foodUpdateInput, foodUncheckedUpdateInput>
  }


  /**
   * food delete
   */
  export type foodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
    /**
     * Filter which food to delete.
     */
    where: foodWhereUniqueInput
  }


  /**
   * food deleteMany
   */
  export type foodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which foods to delete
     */
    where?: foodWhereInput
  }


  /**
   * food without action
   */
  export type foodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the food
     */
    select?: foodSelect<ExtArgs> | null
  }



  /**
   * Model userdata
   */

  export type AggregateUserdata = {
    _count: UserdataCountAggregateOutputType | null
    _avg: UserdataAvgAggregateOutputType | null
    _sum: UserdataSumAggregateOutputType | null
    _min: UserdataMinAggregateOutputType | null
    _max: UserdataMaxAggregateOutputType | null
  }

  export type UserdataAvgAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
    quantity: Decimal | null
  }

  export type UserdataSumAggregateOutputType = {
    id: number | null
    waterfootprint: Decimal | null
    quantity: Decimal | null
  }

  export type UserdataMinAggregateOutputType = {
    id: number | null
    uid: string | null
    item: string | null
    waterfootprint: Decimal | null
    quantity: Decimal | null
    measure: string | null
    date: Date | null
  }

  export type UserdataMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    item: string | null
    waterfootprint: Decimal | null
    quantity: Decimal | null
    measure: string | null
    date: Date | null
  }

  export type UserdataCountAggregateOutputType = {
    id: number
    uid: number
    item: number
    waterfootprint: number
    quantity: number
    measure: number
    date: number
    _all: number
  }


  export type UserdataAvgAggregateInputType = {
    id?: true
    waterfootprint?: true
    quantity?: true
  }

  export type UserdataSumAggregateInputType = {
    id?: true
    waterfootprint?: true
    quantity?: true
  }

  export type UserdataMinAggregateInputType = {
    id?: true
    uid?: true
    item?: true
    waterfootprint?: true
    quantity?: true
    measure?: true
    date?: true
  }

  export type UserdataMaxAggregateInputType = {
    id?: true
    uid?: true
    item?: true
    waterfootprint?: true
    quantity?: true
    measure?: true
    date?: true
  }

  export type UserdataCountAggregateInputType = {
    id?: true
    uid?: true
    item?: true
    waterfootprint?: true
    quantity?: true
    measure?: true
    date?: true
    _all?: true
  }

  export type UserdataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userdata to aggregate.
     */
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     */
    orderBy?: userdataOrderByWithRelationAndSearchRelevanceInput | userdataOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userdata
    **/
    _count?: true | UserdataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserdataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserdataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserdataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserdataMaxAggregateInputType
  }

  export type GetUserdataAggregateType<T extends UserdataAggregateArgs> = {
        [P in keyof T & keyof AggregateUserdata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserdata[P]>
      : GetScalarType<T[P], AggregateUserdata[P]>
  }




  export type userdataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userdataWhereInput
    orderBy?: userdataOrderByWithAggregationInput | userdataOrderByWithAggregationInput[]
    by: UserdataScalarFieldEnum[] | UserdataScalarFieldEnum
    having?: userdataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserdataCountAggregateInputType | true
    _avg?: UserdataAvgAggregateInputType
    _sum?: UserdataSumAggregateInputType
    _min?: UserdataMinAggregateInputType
    _max?: UserdataMaxAggregateInputType
  }

  export type UserdataGroupByOutputType = {
    id: number
    uid: string
    item: string
    waterfootprint: Decimal
    quantity: Decimal
    measure: string
    date: Date
    _count: UserdataCountAggregateOutputType | null
    _avg: UserdataAvgAggregateOutputType | null
    _sum: UserdataSumAggregateOutputType | null
    _min: UserdataMinAggregateOutputType | null
    _max: UserdataMaxAggregateOutputType | null
  }

  type GetUserdataGroupByPayload<T extends userdataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserdataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserdataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserdataGroupByOutputType[P]>
            : GetScalarType<T[P], UserdataGroupByOutputType[P]>
        }
      >
    >


  export type userdataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    item?: boolean
    waterfootprint?: boolean
    quantity?: boolean
    measure?: boolean
    date?: boolean
  }, ExtArgs["result"]["userdata"]>

  export type userdataSelectScalar = {
    id?: boolean
    uid?: boolean
    item?: boolean
    waterfootprint?: boolean
    quantity?: boolean
    measure?: boolean
    date?: boolean
  }


  export type $userdataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userdata"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uid: string
      item: string
      waterfootprint: Prisma.Decimal
      quantity: Prisma.Decimal
      measure: string
      date: Date
    }, ExtArgs["result"]["userdata"]>
    composites: {}
  }


  type userdataGetPayload<S extends boolean | null | undefined | userdataDefaultArgs> = $Result.GetResult<Prisma.$userdataPayload, S>

  type userdataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userdataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserdataCountAggregateInputType | true
    }

  export interface userdataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userdata'], meta: { name: 'userdata' } }
    /**
     * Find zero or one Userdata that matches the filter.
     * @param {userdataFindUniqueArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userdataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userdataFindUniqueArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Userdata that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userdataFindUniqueOrThrowArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userdataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Userdata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataFindFirstArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userdataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataFindFirstArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Userdata that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataFindFirstOrThrowArgs} args - Arguments to find a Userdata
     * @example
     * // Get one Userdata
     * const userdata = await prisma.userdata.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userdataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Userdata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userdata
     * const userdata = await prisma.userdata.findMany()
     * 
     * // Get first 10 Userdata
     * const userdata = await prisma.userdata.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userdataWithIdOnly = await prisma.userdata.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userdataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Userdata.
     * @param {userdataCreateArgs} args - Arguments to create a Userdata.
     * @example
     * // Create one Userdata
     * const Userdata = await prisma.userdata.create({
     *   data: {
     *     // ... data to create a Userdata
     *   }
     * })
     * 
    **/
    create<T extends userdataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userdataCreateArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Userdata.
     *     @param {userdataCreateManyArgs} args - Arguments to create many Userdata.
     *     @example
     *     // Create many Userdata
     *     const userdata = await prisma.userdata.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userdataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Userdata.
     * @param {userdataDeleteArgs} args - Arguments to delete one Userdata.
     * @example
     * // Delete one Userdata
     * const Userdata = await prisma.userdata.delete({
     *   where: {
     *     // ... filter to delete one Userdata
     *   }
     * })
     * 
    **/
    delete<T extends userdataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userdataDeleteArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Userdata.
     * @param {userdataUpdateArgs} args - Arguments to update one Userdata.
     * @example
     * // Update one Userdata
     * const userdata = await prisma.userdata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userdataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userdataUpdateArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Userdata.
     * @param {userdataDeleteManyArgs} args - Arguments to filter Userdata to delete.
     * @example
     * // Delete a few Userdata
     * const { count } = await prisma.userdata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userdataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userdataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userdata
     * const userdata = await prisma.userdata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userdataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userdataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Userdata.
     * @param {userdataUpsertArgs} args - Arguments to update or create a Userdata.
     * @example
     * // Update or create a Userdata
     * const userdata = await prisma.userdata.upsert({
     *   create: {
     *     // ... data to create a Userdata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userdata we want to update
     *   }
     * })
    **/
    upsert<T extends userdataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userdataUpsertArgs<ExtArgs>>
    ): Prisma__userdataClient<$Result.GetResult<Prisma.$userdataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataCountArgs} args - Arguments to filter Userdata to count.
     * @example
     * // Count the number of Userdata
     * const count = await prisma.userdata.count({
     *   where: {
     *     // ... the filter for the Userdata we want to count
     *   }
     * })
    **/
    count<T extends userdataCountArgs>(
      args?: Subset<T, userdataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserdataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserdataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserdataAggregateArgs>(args: Subset<T, UserdataAggregateArgs>): Prisma.PrismaPromise<GetUserdataAggregateType<T>>

    /**
     * Group by Userdata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userdataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userdataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userdataGroupByArgs['orderBy'] }
        : { orderBy?: userdataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userdataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserdataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userdata model
   */
  readonly fields: userdataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userdata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userdataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the userdata model
   */ 
  interface userdataFieldRefs {
    readonly id: FieldRef<"userdata", 'Int'>
    readonly uid: FieldRef<"userdata", 'String'>
    readonly item: FieldRef<"userdata", 'String'>
    readonly waterfootprint: FieldRef<"userdata", 'Decimal'>
    readonly quantity: FieldRef<"userdata", 'Decimal'>
    readonly measure: FieldRef<"userdata", 'String'>
    readonly date: FieldRef<"userdata", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * userdata findUnique
   */
  export type userdataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter, which userdata to fetch.
     */
    where: userdataWhereUniqueInput
  }


  /**
   * userdata findUniqueOrThrow
   */
  export type userdataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter, which userdata to fetch.
     */
    where: userdataWhereUniqueInput
  }


  /**
   * userdata findFirst
   */
  export type userdataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter, which userdata to fetch.
     */
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     */
    orderBy?: userdataOrderByWithRelationAndSearchRelevanceInput | userdataOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userdata.
     */
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userdata.
     */
    distinct?: UserdataScalarFieldEnum | UserdataScalarFieldEnum[]
  }


  /**
   * userdata findFirstOrThrow
   */
  export type userdataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter, which userdata to fetch.
     */
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     */
    orderBy?: userdataOrderByWithRelationAndSearchRelevanceInput | userdataOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userdata.
     */
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userdata.
     */
    distinct?: UserdataScalarFieldEnum | UserdataScalarFieldEnum[]
  }


  /**
   * userdata findMany
   */
  export type userdataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter, which userdata to fetch.
     */
    where?: userdataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userdata to fetch.
     */
    orderBy?: userdataOrderByWithRelationAndSearchRelevanceInput | userdataOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userdata.
     */
    cursor?: userdataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userdata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userdata.
     */
    skip?: number
    distinct?: UserdataScalarFieldEnum | UserdataScalarFieldEnum[]
  }


  /**
   * userdata create
   */
  export type userdataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * The data needed to create a userdata.
     */
    data: XOR<userdataCreateInput, userdataUncheckedCreateInput>
  }


  /**
   * userdata createMany
   */
  export type userdataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userdata.
     */
    data: userdataCreateManyInput | userdataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * userdata update
   */
  export type userdataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * The data needed to update a userdata.
     */
    data: XOR<userdataUpdateInput, userdataUncheckedUpdateInput>
    /**
     * Choose, which userdata to update.
     */
    where: userdataWhereUniqueInput
  }


  /**
   * userdata updateMany
   */
  export type userdataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userdata.
     */
    data: XOR<userdataUpdateManyMutationInput, userdataUncheckedUpdateManyInput>
    /**
     * Filter which userdata to update
     */
    where?: userdataWhereInput
  }


  /**
   * userdata upsert
   */
  export type userdataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * The filter to search for the userdata to update in case it exists.
     */
    where: userdataWhereUniqueInput
    /**
     * In case the userdata found by the `where` argument doesn't exist, create a new userdata with this data.
     */
    create: XOR<userdataCreateInput, userdataUncheckedCreateInput>
    /**
     * In case the userdata was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userdataUpdateInput, userdataUncheckedUpdateInput>
  }


  /**
   * userdata delete
   */
  export type userdataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
    /**
     * Filter which userdata to delete.
     */
    where: userdataWhereUniqueInput
  }


  /**
   * userdata deleteMany
   */
  export type userdataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userdata to delete
     */
    where?: userdataWhereInput
  }


  /**
   * userdata without action
   */
  export type userdataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userdata
     */
    select?: userdataSelect<ExtArgs> | null
  }



  /**
   * Model xp
   */

  export type AggregateXp = {
    _count: XpCountAggregateOutputType | null
    _avg: XpAvgAggregateOutputType | null
    _sum: XpSumAggregateOutputType | null
    _min: XpMinAggregateOutputType | null
    _max: XpMaxAggregateOutputType | null
  }

  export type XpAvgAggregateOutputType = {
    id: number | null
    totalxp: Decimal | null
  }

  export type XpSumAggregateOutputType = {
    id: number | null
    totalxp: Decimal | null
  }

  export type XpMinAggregateOutputType = {
    id: number | null
    uid: string | null
    totalxp: Decimal | null
    date: Date | null
  }

  export type XpMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    totalxp: Decimal | null
    date: Date | null
  }

  export type XpCountAggregateOutputType = {
    id: number
    uid: number
    totalxp: number
    date: number
    _all: number
  }


  export type XpAvgAggregateInputType = {
    id?: true
    totalxp?: true
  }

  export type XpSumAggregateInputType = {
    id?: true
    totalxp?: true
  }

  export type XpMinAggregateInputType = {
    id?: true
    uid?: true
    totalxp?: true
    date?: true
  }

  export type XpMaxAggregateInputType = {
    id?: true
    uid?: true
    totalxp?: true
    date?: true
  }

  export type XpCountAggregateInputType = {
    id?: true
    uid?: true
    totalxp?: true
    date?: true
    _all?: true
  }

  export type XpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which xp to aggregate.
     */
    where?: xpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of xps to fetch.
     */
    orderBy?: xpOrderByWithRelationAndSearchRelevanceInput | xpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: xpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` xps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` xps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned xps
    **/
    _count?: true | XpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: XpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: XpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: XpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: XpMaxAggregateInputType
  }

  export type GetXpAggregateType<T extends XpAggregateArgs> = {
        [P in keyof T & keyof AggregateXp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateXp[P]>
      : GetScalarType<T[P], AggregateXp[P]>
  }




  export type xpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: xpWhereInput
    orderBy?: xpOrderByWithAggregationInput | xpOrderByWithAggregationInput[]
    by: XpScalarFieldEnum[] | XpScalarFieldEnum
    having?: xpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: XpCountAggregateInputType | true
    _avg?: XpAvgAggregateInputType
    _sum?: XpSumAggregateInputType
    _min?: XpMinAggregateInputType
    _max?: XpMaxAggregateInputType
  }

  export type XpGroupByOutputType = {
    id: number
    uid: string
    totalxp: Decimal
    date: Date
    _count: XpCountAggregateOutputType | null
    _avg: XpAvgAggregateOutputType | null
    _sum: XpSumAggregateOutputType | null
    _min: XpMinAggregateOutputType | null
    _max: XpMaxAggregateOutputType | null
  }

  type GetXpGroupByPayload<T extends xpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<XpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof XpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], XpGroupByOutputType[P]>
            : GetScalarType<T[P], XpGroupByOutputType[P]>
        }
      >
    >


  export type xpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    totalxp?: boolean
    date?: boolean
  }, ExtArgs["result"]["xp"]>

  export type xpSelectScalar = {
    id?: boolean
    uid?: boolean
    totalxp?: boolean
    date?: boolean
  }


  export type $xpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "xp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uid: string
      totalxp: Prisma.Decimal
      date: Date
    }, ExtArgs["result"]["xp"]>
    composites: {}
  }


  type xpGetPayload<S extends boolean | null | undefined | xpDefaultArgs> = $Result.GetResult<Prisma.$xpPayload, S>

  type xpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<xpFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: XpCountAggregateInputType | true
    }

  export interface xpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['xp'], meta: { name: 'xp' } }
    /**
     * Find zero or one Xp that matches the filter.
     * @param {xpFindUniqueArgs} args - Arguments to find a Xp
     * @example
     * // Get one Xp
     * const xp = await prisma.xp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends xpFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, xpFindUniqueArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Xp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {xpFindUniqueOrThrowArgs} args - Arguments to find a Xp
     * @example
     * // Get one Xp
     * const xp = await prisma.xp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends xpFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, xpFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Xp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpFindFirstArgs} args - Arguments to find a Xp
     * @example
     * // Get one Xp
     * const xp = await prisma.xp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends xpFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, xpFindFirstArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Xp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpFindFirstOrThrowArgs} args - Arguments to find a Xp
     * @example
     * // Get one Xp
     * const xp = await prisma.xp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends xpFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, xpFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Xps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Xps
     * const xps = await prisma.xp.findMany()
     * 
     * // Get first 10 Xps
     * const xps = await prisma.xp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const xpWithIdOnly = await prisma.xp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends xpFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, xpFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Xp.
     * @param {xpCreateArgs} args - Arguments to create a Xp.
     * @example
     * // Create one Xp
     * const Xp = await prisma.xp.create({
     *   data: {
     *     // ... data to create a Xp
     *   }
     * })
     * 
    **/
    create<T extends xpCreateArgs<ExtArgs>>(
      args: SelectSubset<T, xpCreateArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Xps.
     *     @param {xpCreateManyArgs} args - Arguments to create many Xps.
     *     @example
     *     // Create many Xps
     *     const xp = await prisma.xp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends xpCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, xpCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Xp.
     * @param {xpDeleteArgs} args - Arguments to delete one Xp.
     * @example
     * // Delete one Xp
     * const Xp = await prisma.xp.delete({
     *   where: {
     *     // ... filter to delete one Xp
     *   }
     * })
     * 
    **/
    delete<T extends xpDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, xpDeleteArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Xp.
     * @param {xpUpdateArgs} args - Arguments to update one Xp.
     * @example
     * // Update one Xp
     * const xp = await prisma.xp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends xpUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, xpUpdateArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Xps.
     * @param {xpDeleteManyArgs} args - Arguments to filter Xps to delete.
     * @example
     * // Delete a few Xps
     * const { count } = await prisma.xp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends xpDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, xpDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Xps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Xps
     * const xp = await prisma.xp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends xpUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, xpUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Xp.
     * @param {xpUpsertArgs} args - Arguments to update or create a Xp.
     * @example
     * // Update or create a Xp
     * const xp = await prisma.xp.upsert({
     *   create: {
     *     // ... data to create a Xp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Xp we want to update
     *   }
     * })
    **/
    upsert<T extends xpUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, xpUpsertArgs<ExtArgs>>
    ): Prisma__xpClient<$Result.GetResult<Prisma.$xpPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Xps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpCountArgs} args - Arguments to filter Xps to count.
     * @example
     * // Count the number of Xps
     * const count = await prisma.xp.count({
     *   where: {
     *     // ... the filter for the Xps we want to count
     *   }
     * })
    **/
    count<T extends xpCountArgs>(
      args?: Subset<T, xpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], XpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Xp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends XpAggregateArgs>(args: Subset<T, XpAggregateArgs>): Prisma.PrismaPromise<GetXpAggregateType<T>>

    /**
     * Group by Xp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {xpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends xpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: xpGroupByArgs['orderBy'] }
        : { orderBy?: xpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, xpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetXpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the xp model
   */
  readonly fields: xpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for xp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__xpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the xp model
   */ 
  interface xpFieldRefs {
    readonly id: FieldRef<"xp", 'Int'>
    readonly uid: FieldRef<"xp", 'String'>
    readonly totalxp: FieldRef<"xp", 'Decimal'>
    readonly date: FieldRef<"xp", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * xp findUnique
   */
  export type xpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter, which xp to fetch.
     */
    where: xpWhereUniqueInput
  }


  /**
   * xp findUniqueOrThrow
   */
  export type xpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter, which xp to fetch.
     */
    where: xpWhereUniqueInput
  }


  /**
   * xp findFirst
   */
  export type xpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter, which xp to fetch.
     */
    where?: xpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of xps to fetch.
     */
    orderBy?: xpOrderByWithRelationAndSearchRelevanceInput | xpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for xps.
     */
    cursor?: xpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` xps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` xps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of xps.
     */
    distinct?: XpScalarFieldEnum | XpScalarFieldEnum[]
  }


  /**
   * xp findFirstOrThrow
   */
  export type xpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter, which xp to fetch.
     */
    where?: xpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of xps to fetch.
     */
    orderBy?: xpOrderByWithRelationAndSearchRelevanceInput | xpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for xps.
     */
    cursor?: xpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` xps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` xps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of xps.
     */
    distinct?: XpScalarFieldEnum | XpScalarFieldEnum[]
  }


  /**
   * xp findMany
   */
  export type xpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter, which xps to fetch.
     */
    where?: xpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of xps to fetch.
     */
    orderBy?: xpOrderByWithRelationAndSearchRelevanceInput | xpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing xps.
     */
    cursor?: xpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` xps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` xps.
     */
    skip?: number
    distinct?: XpScalarFieldEnum | XpScalarFieldEnum[]
  }


  /**
   * xp create
   */
  export type xpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * The data needed to create a xp.
     */
    data: XOR<xpCreateInput, xpUncheckedCreateInput>
  }


  /**
   * xp createMany
   */
  export type xpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many xps.
     */
    data: xpCreateManyInput | xpCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * xp update
   */
  export type xpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * The data needed to update a xp.
     */
    data: XOR<xpUpdateInput, xpUncheckedUpdateInput>
    /**
     * Choose, which xp to update.
     */
    where: xpWhereUniqueInput
  }


  /**
   * xp updateMany
   */
  export type xpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update xps.
     */
    data: XOR<xpUpdateManyMutationInput, xpUncheckedUpdateManyInput>
    /**
     * Filter which xps to update
     */
    where?: xpWhereInput
  }


  /**
   * xp upsert
   */
  export type xpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * The filter to search for the xp to update in case it exists.
     */
    where: xpWhereUniqueInput
    /**
     * In case the xp found by the `where` argument doesn't exist, create a new xp with this data.
     */
    create: XOR<xpCreateInput, xpUncheckedCreateInput>
    /**
     * In case the xp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<xpUpdateInput, xpUncheckedUpdateInput>
  }


  /**
   * xp delete
   */
  export type xpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
    /**
     * Filter which xp to delete.
     */
    where: xpWhereUniqueInput
  }


  /**
   * xp deleteMany
   */
  export type xpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which xps to delete
     */
    where?: xpWhereInput
  }


  /**
   * xp without action
   */
  export type xpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the xp
     */
    select?: xpSelect<ExtArgs> | null
  }



  /**
   * Model newxp
   */

  export type AggregateNewxp = {
    _count: NewxpCountAggregateOutputType | null
    _avg: NewxpAvgAggregateOutputType | null
    _sum: NewxpSumAggregateOutputType | null
    _min: NewxpMinAggregateOutputType | null
    _max: NewxpMaxAggregateOutputType | null
  }

  export type NewxpAvgAggregateOutputType = {
    id: number | null
    totalxp: Decimal | null
  }

  export type NewxpSumAggregateOutputType = {
    id: number | null
    totalxp: Decimal | null
  }

  export type NewxpMinAggregateOutputType = {
    id: number | null
    uid: string | null
    name: string | null
    totalxp: Decimal | null
    date: Date | null
  }

  export type NewxpMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    name: string | null
    totalxp: Decimal | null
    date: Date | null
  }

  export type NewxpCountAggregateOutputType = {
    id: number
    uid: number
    name: number
    totalxp: number
    date: number
    _all: number
  }


  export type NewxpAvgAggregateInputType = {
    id?: true
    totalxp?: true
  }

  export type NewxpSumAggregateInputType = {
    id?: true
    totalxp?: true
  }

  export type NewxpMinAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    totalxp?: true
    date?: true
  }

  export type NewxpMaxAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    totalxp?: true
    date?: true
  }

  export type NewxpCountAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    totalxp?: true
    date?: true
    _all?: true
  }

  export type NewxpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which newxp to aggregate.
     */
    where?: newxpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newxps to fetch.
     */
    orderBy?: newxpOrderByWithRelationAndSearchRelevanceInput | newxpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newxpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newxps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newxps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned newxps
    **/
    _count?: true | NewxpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewxpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewxpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewxpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewxpMaxAggregateInputType
  }

  export type GetNewxpAggregateType<T extends NewxpAggregateArgs> = {
        [P in keyof T & keyof AggregateNewxp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewxp[P]>
      : GetScalarType<T[P], AggregateNewxp[P]>
  }




  export type newxpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: newxpWhereInput
    orderBy?: newxpOrderByWithAggregationInput | newxpOrderByWithAggregationInput[]
    by: NewxpScalarFieldEnum[] | NewxpScalarFieldEnum
    having?: newxpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewxpCountAggregateInputType | true
    _avg?: NewxpAvgAggregateInputType
    _sum?: NewxpSumAggregateInputType
    _min?: NewxpMinAggregateInputType
    _max?: NewxpMaxAggregateInputType
  }

  export type NewxpGroupByOutputType = {
    id: number
    uid: string
    name: string
    totalxp: Decimal
    date: Date
    _count: NewxpCountAggregateOutputType | null
    _avg: NewxpAvgAggregateOutputType | null
    _sum: NewxpSumAggregateOutputType | null
    _min: NewxpMinAggregateOutputType | null
    _max: NewxpMaxAggregateOutputType | null
  }

  type GetNewxpGroupByPayload<T extends newxpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewxpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewxpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewxpGroupByOutputType[P]>
            : GetScalarType<T[P], NewxpGroupByOutputType[P]>
        }
      >
    >


  export type newxpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    name?: boolean
    totalxp?: boolean
    date?: boolean
  }, ExtArgs["result"]["newxp"]>

  export type newxpSelectScalar = {
    id?: boolean
    uid?: boolean
    name?: boolean
    totalxp?: boolean
    date?: boolean
  }


  export type $newxpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "newxp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      uid: string
      name: string
      totalxp: Prisma.Decimal
      date: Date
    }, ExtArgs["result"]["newxp"]>
    composites: {}
  }


  type newxpGetPayload<S extends boolean | null | undefined | newxpDefaultArgs> = $Result.GetResult<Prisma.$newxpPayload, S>

  type newxpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<newxpFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewxpCountAggregateInputType | true
    }

  export interface newxpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['newxp'], meta: { name: 'newxp' } }
    /**
     * Find zero or one Newxp that matches the filter.
     * @param {newxpFindUniqueArgs} args - Arguments to find a Newxp
     * @example
     * // Get one Newxp
     * const newxp = await prisma.newxp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends newxpFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, newxpFindUniqueArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Newxp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {newxpFindUniqueOrThrowArgs} args - Arguments to find a Newxp
     * @example
     * // Get one Newxp
     * const newxp = await prisma.newxp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends newxpFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Newxp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpFindFirstArgs} args - Arguments to find a Newxp
     * @example
     * // Get one Newxp
     * const newxp = await prisma.newxp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends newxpFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpFindFirstArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Newxp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpFindFirstOrThrowArgs} args - Arguments to find a Newxp
     * @example
     * // Get one Newxp
     * const newxp = await prisma.newxp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends newxpFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Newxps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newxps
     * const newxps = await prisma.newxp.findMany()
     * 
     * // Get first 10 Newxps
     * const newxps = await prisma.newxp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newxpWithIdOnly = await prisma.newxp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends newxpFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Newxp.
     * @param {newxpCreateArgs} args - Arguments to create a Newxp.
     * @example
     * // Create one Newxp
     * const Newxp = await prisma.newxp.create({
     *   data: {
     *     // ... data to create a Newxp
     *   }
     * })
     * 
    **/
    create<T extends newxpCreateArgs<ExtArgs>>(
      args: SelectSubset<T, newxpCreateArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Newxps.
     *     @param {newxpCreateManyArgs} args - Arguments to create many Newxps.
     *     @example
     *     // Create many Newxps
     *     const newxp = await prisma.newxp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends newxpCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Newxp.
     * @param {newxpDeleteArgs} args - Arguments to delete one Newxp.
     * @example
     * // Delete one Newxp
     * const Newxp = await prisma.newxp.delete({
     *   where: {
     *     // ... filter to delete one Newxp
     *   }
     * })
     * 
    **/
    delete<T extends newxpDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, newxpDeleteArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Newxp.
     * @param {newxpUpdateArgs} args - Arguments to update one Newxp.
     * @example
     * // Update one Newxp
     * const newxp = await prisma.newxp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends newxpUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, newxpUpdateArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Newxps.
     * @param {newxpDeleteManyArgs} args - Arguments to filter Newxps to delete.
     * @example
     * // Delete a few Newxps
     * const { count } = await prisma.newxp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends newxpDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, newxpDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newxps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newxps
     * const newxp = await prisma.newxp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends newxpUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, newxpUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Newxp.
     * @param {newxpUpsertArgs} args - Arguments to update or create a Newxp.
     * @example
     * // Update or create a Newxp
     * const newxp = await prisma.newxp.upsert({
     *   create: {
     *     // ... data to create a Newxp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newxp we want to update
     *   }
     * })
    **/
    upsert<T extends newxpUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, newxpUpsertArgs<ExtArgs>>
    ): Prisma__newxpClient<$Result.GetResult<Prisma.$newxpPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Newxps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpCountArgs} args - Arguments to filter Newxps to count.
     * @example
     * // Count the number of Newxps
     * const count = await prisma.newxp.count({
     *   where: {
     *     // ... the filter for the Newxps we want to count
     *   }
     * })
    **/
    count<T extends newxpCountArgs>(
      args?: Subset<T, newxpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewxpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newxp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewxpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewxpAggregateArgs>(args: Subset<T, NewxpAggregateArgs>): Prisma.PrismaPromise<GetNewxpAggregateType<T>>

    /**
     * Group by Newxp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newxpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends newxpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: newxpGroupByArgs['orderBy'] }
        : { orderBy?: newxpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, newxpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewxpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the newxp model
   */
  readonly fields: newxpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for newxp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__newxpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the newxp model
   */ 
  interface newxpFieldRefs {
    readonly id: FieldRef<"newxp", 'Int'>
    readonly uid: FieldRef<"newxp", 'String'>
    readonly name: FieldRef<"newxp", 'String'>
    readonly totalxp: FieldRef<"newxp", 'Decimal'>
    readonly date: FieldRef<"newxp", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * newxp findUnique
   */
  export type newxpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter, which newxp to fetch.
     */
    where: newxpWhereUniqueInput
  }


  /**
   * newxp findUniqueOrThrow
   */
  export type newxpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter, which newxp to fetch.
     */
    where: newxpWhereUniqueInput
  }


  /**
   * newxp findFirst
   */
  export type newxpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter, which newxp to fetch.
     */
    where?: newxpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newxps to fetch.
     */
    orderBy?: newxpOrderByWithRelationAndSearchRelevanceInput | newxpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newxps.
     */
    cursor?: newxpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newxps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newxps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newxps.
     */
    distinct?: NewxpScalarFieldEnum | NewxpScalarFieldEnum[]
  }


  /**
   * newxp findFirstOrThrow
   */
  export type newxpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter, which newxp to fetch.
     */
    where?: newxpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newxps to fetch.
     */
    orderBy?: newxpOrderByWithRelationAndSearchRelevanceInput | newxpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for newxps.
     */
    cursor?: newxpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newxps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newxps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of newxps.
     */
    distinct?: NewxpScalarFieldEnum | NewxpScalarFieldEnum[]
  }


  /**
   * newxp findMany
   */
  export type newxpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter, which newxps to fetch.
     */
    where?: newxpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of newxps to fetch.
     */
    orderBy?: newxpOrderByWithRelationAndSearchRelevanceInput | newxpOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing newxps.
     */
    cursor?: newxpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` newxps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` newxps.
     */
    skip?: number
    distinct?: NewxpScalarFieldEnum | NewxpScalarFieldEnum[]
  }


  /**
   * newxp create
   */
  export type newxpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * The data needed to create a newxp.
     */
    data: XOR<newxpCreateInput, newxpUncheckedCreateInput>
  }


  /**
   * newxp createMany
   */
  export type newxpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many newxps.
     */
    data: newxpCreateManyInput | newxpCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * newxp update
   */
  export type newxpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * The data needed to update a newxp.
     */
    data: XOR<newxpUpdateInput, newxpUncheckedUpdateInput>
    /**
     * Choose, which newxp to update.
     */
    where: newxpWhereUniqueInput
  }


  /**
   * newxp updateMany
   */
  export type newxpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update newxps.
     */
    data: XOR<newxpUpdateManyMutationInput, newxpUncheckedUpdateManyInput>
    /**
     * Filter which newxps to update
     */
    where?: newxpWhereInput
  }


  /**
   * newxp upsert
   */
  export type newxpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * The filter to search for the newxp to update in case it exists.
     */
    where: newxpWhereUniqueInput
    /**
     * In case the newxp found by the `where` argument doesn't exist, create a new newxp with this data.
     */
    create: XOR<newxpCreateInput, newxpUncheckedCreateInput>
    /**
     * In case the newxp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newxpUpdateInput, newxpUncheckedUpdateInput>
  }


  /**
   * newxp delete
   */
  export type newxpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
    /**
     * Filter which newxp to delete.
     */
    where: newxpWhereUniqueInput
  }


  /**
   * newxp deleteMany
   */
  export type newxpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which newxps to delete
     */
    where?: newxpWhereInput
  }


  /**
   * newxp without action
   */
  export type newxpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the newxp
     */
    select?: newxpSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    activity: 'activity',
    waterfootprint: 'waterfootprint'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const FoodScalarFieldEnum: {
    id: 'id',
    fooditems: 'fooditems',
    waterfootprint: 'waterfootprint'
  };

  export type FoodScalarFieldEnum = (typeof FoodScalarFieldEnum)[keyof typeof FoodScalarFieldEnum]


  export const UserdataScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    item: 'item',
    waterfootprint: 'waterfootprint',
    quantity: 'quantity',
    measure: 'measure',
    date: 'date'
  };

  export type UserdataScalarFieldEnum = (typeof UserdataScalarFieldEnum)[keyof typeof UserdataScalarFieldEnum]


  export const XpScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    totalxp: 'totalxp',
    date: 'date'
  };

  export type XpScalarFieldEnum = (typeof XpScalarFieldEnum)[keyof typeof XpScalarFieldEnum]


  export const NewxpScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    name: 'name',
    totalxp: 'totalxp',
    date: 'date'
  };

  export type NewxpScalarFieldEnum = (typeof NewxpScalarFieldEnum)[keyof typeof NewxpScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const activityOrderByRelevanceFieldEnum: {
    activity: 'activity'
  };

  export type activityOrderByRelevanceFieldEnum = (typeof activityOrderByRelevanceFieldEnum)[keyof typeof activityOrderByRelevanceFieldEnum]


  export const foodOrderByRelevanceFieldEnum: {
    fooditems: 'fooditems'
  };

  export type foodOrderByRelevanceFieldEnum = (typeof foodOrderByRelevanceFieldEnum)[keyof typeof foodOrderByRelevanceFieldEnum]


  export const userdataOrderByRelevanceFieldEnum: {
    uid: 'uid',
    item: 'item',
    measure: 'measure'
  };

  export type userdataOrderByRelevanceFieldEnum = (typeof userdataOrderByRelevanceFieldEnum)[keyof typeof userdataOrderByRelevanceFieldEnum]


  export const xpOrderByRelevanceFieldEnum: {
    uid: 'uid'
  };

  export type xpOrderByRelevanceFieldEnum = (typeof xpOrderByRelevanceFieldEnum)[keyof typeof xpOrderByRelevanceFieldEnum]


  export const newxpOrderByRelevanceFieldEnum: {
    uid: 'uid',
    name: 'name'
  };

  export type newxpOrderByRelevanceFieldEnum = (typeof newxpOrderByRelevanceFieldEnum)[keyof typeof newxpOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type activityWhereInput = {
    AND?: activityWhereInput | activityWhereInput[]
    OR?: activityWhereInput[]
    NOT?: activityWhereInput | activityWhereInput[]
    id?: IntFilter<"activity"> | number
    activity?: StringNullableFilter<"activity"> | string | null
    waterfootprint?: DecimalNullableFilter<"activity"> | Decimal | DecimalJsLike | number | string | null
  }

  export type activityOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    activity?: SortOrderInput | SortOrder
    waterfootprint?: SortOrderInput | SortOrder
    _relevance?: activityOrderByRelevanceInput
  }

  export type activityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: activityWhereInput | activityWhereInput[]
    OR?: activityWhereInput[]
    NOT?: activityWhereInput | activityWhereInput[]
    activity?: StringNullableFilter<"activity"> | string | null
    waterfootprint?: DecimalNullableFilter<"activity"> | Decimal | DecimalJsLike | number | string | null
  }, "id">

  export type activityOrderByWithAggregationInput = {
    id?: SortOrder
    activity?: SortOrderInput | SortOrder
    waterfootprint?: SortOrderInput | SortOrder
    _count?: activityCountOrderByAggregateInput
    _avg?: activityAvgOrderByAggregateInput
    _max?: activityMaxOrderByAggregateInput
    _min?: activityMinOrderByAggregateInput
    _sum?: activitySumOrderByAggregateInput
  }

  export type activityScalarWhereWithAggregatesInput = {
    AND?: activityScalarWhereWithAggregatesInput | activityScalarWhereWithAggregatesInput[]
    OR?: activityScalarWhereWithAggregatesInput[]
    NOT?: activityScalarWhereWithAggregatesInput | activityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"activity"> | number
    activity?: StringNullableWithAggregatesFilter<"activity"> | string | null
    waterfootprint?: DecimalNullableWithAggregatesFilter<"activity"> | Decimal | DecimalJsLike | number | string | null
  }

  export type foodWhereInput = {
    AND?: foodWhereInput | foodWhereInput[]
    OR?: foodWhereInput[]
    NOT?: foodWhereInput | foodWhereInput[]
    id?: IntFilter<"food"> | number
    fooditems?: StringNullableFilter<"food"> | string | null
    waterfootprint?: DecimalNullableFilter<"food"> | Decimal | DecimalJsLike | number | string | null
  }

  export type foodOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    fooditems?: SortOrderInput | SortOrder
    waterfootprint?: SortOrderInput | SortOrder
    _relevance?: foodOrderByRelevanceInput
  }

  export type foodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: foodWhereInput | foodWhereInput[]
    OR?: foodWhereInput[]
    NOT?: foodWhereInput | foodWhereInput[]
    fooditems?: StringNullableFilter<"food"> | string | null
    waterfootprint?: DecimalNullableFilter<"food"> | Decimal | DecimalJsLike | number | string | null
  }, "id">

  export type foodOrderByWithAggregationInput = {
    id?: SortOrder
    fooditems?: SortOrderInput | SortOrder
    waterfootprint?: SortOrderInput | SortOrder
    _count?: foodCountOrderByAggregateInput
    _avg?: foodAvgOrderByAggregateInput
    _max?: foodMaxOrderByAggregateInput
    _min?: foodMinOrderByAggregateInput
    _sum?: foodSumOrderByAggregateInput
  }

  export type foodScalarWhereWithAggregatesInput = {
    AND?: foodScalarWhereWithAggregatesInput | foodScalarWhereWithAggregatesInput[]
    OR?: foodScalarWhereWithAggregatesInput[]
    NOT?: foodScalarWhereWithAggregatesInput | foodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"food"> | number
    fooditems?: StringNullableWithAggregatesFilter<"food"> | string | null
    waterfootprint?: DecimalNullableWithAggregatesFilter<"food"> | Decimal | DecimalJsLike | number | string | null
  }

  export type userdataWhereInput = {
    AND?: userdataWhereInput | userdataWhereInput[]
    OR?: userdataWhereInput[]
    NOT?: userdataWhereInput | userdataWhereInput[]
    id?: IntFilter<"userdata"> | number
    uid?: StringFilter<"userdata"> | string
    item?: StringFilter<"userdata"> | string
    waterfootprint?: DecimalFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    measure?: StringFilter<"userdata"> | string
    date?: DateTimeFilter<"userdata"> | Date | string
  }

  export type userdataOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    uid?: SortOrder
    item?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    date?: SortOrder
    _relevance?: userdataOrderByRelevanceInput
  }

  export type userdataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: userdataWhereInput | userdataWhereInput[]
    OR?: userdataWhereInput[]
    NOT?: userdataWhereInput | userdataWhereInput[]
    uid?: StringFilter<"userdata"> | string
    item?: StringFilter<"userdata"> | string
    waterfootprint?: DecimalFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    measure?: StringFilter<"userdata"> | string
    date?: DateTimeFilter<"userdata"> | Date | string
  }, "id">

  export type userdataOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    item?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    date?: SortOrder
    _count?: userdataCountOrderByAggregateInput
    _avg?: userdataAvgOrderByAggregateInput
    _max?: userdataMaxOrderByAggregateInput
    _min?: userdataMinOrderByAggregateInput
    _sum?: userdataSumOrderByAggregateInput
  }

  export type userdataScalarWhereWithAggregatesInput = {
    AND?: userdataScalarWhereWithAggregatesInput | userdataScalarWhereWithAggregatesInput[]
    OR?: userdataScalarWhereWithAggregatesInput[]
    NOT?: userdataScalarWhereWithAggregatesInput | userdataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"userdata"> | number
    uid?: StringWithAggregatesFilter<"userdata"> | string
    item?: StringWithAggregatesFilter<"userdata"> | string
    waterfootprint?: DecimalWithAggregatesFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalWithAggregatesFilter<"userdata"> | Decimal | DecimalJsLike | number | string
    measure?: StringWithAggregatesFilter<"userdata"> | string
    date?: DateTimeWithAggregatesFilter<"userdata"> | Date | string
  }

  export type xpWhereInput = {
    AND?: xpWhereInput | xpWhereInput[]
    OR?: xpWhereInput[]
    NOT?: xpWhereInput | xpWhereInput[]
    id?: IntFilter<"xp"> | number
    uid?: StringFilter<"xp"> | string
    totalxp?: DecimalFilter<"xp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"xp"> | Date | string
  }

  export type xpOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    uid?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
    _relevance?: xpOrderByRelevanceInput
  }

  export type xpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: xpWhereInput | xpWhereInput[]
    OR?: xpWhereInput[]
    NOT?: xpWhereInput | xpWhereInput[]
    uid?: StringFilter<"xp"> | string
    totalxp?: DecimalFilter<"xp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"xp"> | Date | string
  }, "id">

  export type xpOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
    _count?: xpCountOrderByAggregateInput
    _avg?: xpAvgOrderByAggregateInput
    _max?: xpMaxOrderByAggregateInput
    _min?: xpMinOrderByAggregateInput
    _sum?: xpSumOrderByAggregateInput
  }

  export type xpScalarWhereWithAggregatesInput = {
    AND?: xpScalarWhereWithAggregatesInput | xpScalarWhereWithAggregatesInput[]
    OR?: xpScalarWhereWithAggregatesInput[]
    NOT?: xpScalarWhereWithAggregatesInput | xpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"xp"> | number
    uid?: StringWithAggregatesFilter<"xp"> | string
    totalxp?: DecimalWithAggregatesFilter<"xp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeWithAggregatesFilter<"xp"> | Date | string
  }

  export type newxpWhereInput = {
    AND?: newxpWhereInput | newxpWhereInput[]
    OR?: newxpWhereInput[]
    NOT?: newxpWhereInput | newxpWhereInput[]
    id?: IntFilter<"newxp"> | number
    uid?: StringFilter<"newxp"> | string
    name?: StringFilter<"newxp"> | string
    totalxp?: DecimalFilter<"newxp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"newxp"> | Date | string
  }

  export type newxpOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
    _relevance?: newxpOrderByRelevanceInput
  }

  export type newxpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: newxpWhereInput | newxpWhereInput[]
    OR?: newxpWhereInput[]
    NOT?: newxpWhereInput | newxpWhereInput[]
    uid?: StringFilter<"newxp"> | string
    name?: StringFilter<"newxp"> | string
    totalxp?: DecimalFilter<"newxp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeFilter<"newxp"> | Date | string
  }, "id">

  export type newxpOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
    _count?: newxpCountOrderByAggregateInput
    _avg?: newxpAvgOrderByAggregateInput
    _max?: newxpMaxOrderByAggregateInput
    _min?: newxpMinOrderByAggregateInput
    _sum?: newxpSumOrderByAggregateInput
  }

  export type newxpScalarWhereWithAggregatesInput = {
    AND?: newxpScalarWhereWithAggregatesInput | newxpScalarWhereWithAggregatesInput[]
    OR?: newxpScalarWhereWithAggregatesInput[]
    NOT?: newxpScalarWhereWithAggregatesInput | newxpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"newxp"> | number
    uid?: StringWithAggregatesFilter<"newxp"> | string
    name?: StringWithAggregatesFilter<"newxp"> | string
    totalxp?: DecimalWithAggregatesFilter<"newxp"> | Decimal | DecimalJsLike | number | string
    date?: DateTimeWithAggregatesFilter<"newxp"> | Date | string
  }

  export type activityCreateInput = {
    activity?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type activityUncheckedCreateInput = {
    id?: number
    activity?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type activityUpdateInput = {
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type activityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type activityCreateManyInput = {
    id?: number
    activity?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type activityUpdateManyMutationInput = {
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type activityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type foodCreateInput = {
    fooditems?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type foodUncheckedCreateInput = {
    id?: number
    fooditems?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type foodUpdateInput = {
    fooditems?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type foodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fooditems?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type foodCreateManyInput = {
    id?: number
    fooditems?: string | null
    waterfootprint?: Decimal | DecimalJsLike | number | string | null
  }

  export type foodUpdateManyMutationInput = {
    fooditems?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type foodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fooditems?: NullableStringFieldUpdateOperationsInput | string | null
    waterfootprint?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type userdataCreateInput = {
    uid: string
    item: string
    waterfootprint: Decimal | DecimalJsLike | number | string
    quantity: Decimal | DecimalJsLike | number | string
    measure: string
    date?: Date | string
  }

  export type userdataUncheckedCreateInput = {
    id?: number
    uid: string
    item: string
    waterfootprint: Decimal | DecimalJsLike | number | string
    quantity: Decimal | DecimalJsLike | number | string
    measure: string
    date?: Date | string
  }

  export type userdataUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    waterfootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    measure?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userdataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    waterfootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    measure?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userdataCreateManyInput = {
    id?: number
    uid: string
    item: string
    waterfootprint: Decimal | DecimalJsLike | number | string
    quantity: Decimal | DecimalJsLike | number | string
    measure: string
    date?: Date | string
  }

  export type userdataUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    waterfootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    measure?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userdataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    item?: StringFieldUpdateOperationsInput | string
    waterfootprint?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    measure?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type xpCreateInput = {
    uid: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type xpUncheckedCreateInput = {
    id?: number
    uid: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type xpUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type xpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type xpCreateManyInput = {
    id?: number
    uid: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type xpUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type xpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newxpCreateInput = {
    uid: string
    name: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type newxpUncheckedCreateInput = {
    id?: number
    uid: string
    name: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type newxpUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newxpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newxpCreateManyInput = {
    id?: number
    uid: string
    name: string
    totalxp: Decimal | DecimalJsLike | number | string
    date: Date | string
  }

  export type newxpUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type newxpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalxp?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type activityOrderByRelevanceInput = {
    fields: activityOrderByRelevanceFieldEnum | activityOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type activityCountOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    waterfootprint?: SortOrder
  }

  export type activityAvgOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
  }

  export type activityMaxOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    waterfootprint?: SortOrder
  }

  export type activityMinOrderByAggregateInput = {
    id?: SortOrder
    activity?: SortOrder
    waterfootprint?: SortOrder
  }

  export type activitySumOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type foodOrderByRelevanceInput = {
    fields: foodOrderByRelevanceFieldEnum | foodOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type foodCountOrderByAggregateInput = {
    id?: SortOrder
    fooditems?: SortOrder
    waterfootprint?: SortOrder
  }

  export type foodAvgOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
  }

  export type foodMaxOrderByAggregateInput = {
    id?: SortOrder
    fooditems?: SortOrder
    waterfootprint?: SortOrder
  }

  export type foodMinOrderByAggregateInput = {
    id?: SortOrder
    fooditems?: SortOrder
    waterfootprint?: SortOrder
  }

  export type foodSumOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type userdataOrderByRelevanceInput = {
    fields: userdataOrderByRelevanceFieldEnum | userdataOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userdataCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    item?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    date?: SortOrder
  }

  export type userdataAvgOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
  }

  export type userdataMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    item?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    date?: SortOrder
  }

  export type userdataMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    item?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
    measure?: SortOrder
    date?: SortOrder
  }

  export type userdataSumOrderByAggregateInput = {
    id?: SortOrder
    waterfootprint?: SortOrder
    quantity?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type xpOrderByRelevanceInput = {
    fields: xpOrderByRelevanceFieldEnum | xpOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type xpCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type xpAvgOrderByAggregateInput = {
    id?: SortOrder
    totalxp?: SortOrder
  }

  export type xpMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type xpMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type xpSumOrderByAggregateInput = {
    id?: SortOrder
    totalxp?: SortOrder
  }

  export type newxpOrderByRelevanceInput = {
    fields: newxpOrderByRelevanceFieldEnum | newxpOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type newxpCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type newxpAvgOrderByAggregateInput = {
    id?: SortOrder
    totalxp?: SortOrder
  }

  export type newxpMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type newxpMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    totalxp?: SortOrder
    date?: SortOrder
  }

  export type newxpSumOrderByAggregateInput = {
    id?: SortOrder
    totalxp?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use activityDefaultArgs instead
     */
    export type activityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = activityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use foodDefaultArgs instead
     */
    export type foodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = foodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userdataDefaultArgs instead
     */
    export type userdataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userdataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use xpDefaultArgs instead
     */
    export type xpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = xpDefaultArgs<ExtArgs>
    /**
     * @deprecated Use newxpDefaultArgs instead
     */
    export type newxpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = newxpDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}